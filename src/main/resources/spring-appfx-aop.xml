<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- appfx-aop相关测试 -->
	<bean id="pointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="xoxo"></property>
	</bean>
	<bean id="advice"
		class="com.bdsoft.bdceo.spring.aop.PerformanceMethodInterceptor">
	</bean>
	<bean id="advisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut">
			<ref bean="pointcut" />
		</property>
		<property name="advice">
			<ref bean="advice" />
		</property>
	</bean>
	<!-- 基于容器的ProxyFactoryBean，完整配置方式 -->
	<bean id="taskProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="com.bdsoft.bdceo.spring.aop.CounterImpl" />
		</property>
		<property name="proxyInterfaces">
			<list>
				<value>com.bdsoft.bdceo.spring.aop.ICounter</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>advisor</value>
			</list>
		</property>
	</bean>
	<!-- 自动检测，基于接口的代理 -->
	<!-- <bean id="taskProxy2" class="org.springframework.aop.framework.ProxyFactoryBean"> 
		<property name="target"> <bean class="com.bdsoft.bdceo.spring.aop.MockTask" 
		/> </property> <property name="interceptorNames"> <list> <value>advisor</value> 
		</list> </property> </bean> -->
	<!-- 强制使用基于类的代理 -->
	<!-- <bean id="taskProxy3" class="org.springframework.aop.framework.ProxyFactoryBean"> 
		<property name="target"> <bean class="com.bdsoft.bdceo.spring.aop.MockTask" 
		/> </property> <property name="proxyTargetClass" value="true" /> <property 
		name="interceptorNames"> <list> <value>advisor</value> </list> </property> 
		</bean> -->

	<!-- 基于Introduction的配置:singleton="false" 使得每个代理对象都有一份独立的状态和行为 -->
	<bean id="task2" class="com.bdsoft.bdceo.spring.aop.MockTask"
		scope="prototype"></bean>
	<bean id="introductionItcpt"
		class="org.springframework.aop.support.DelegatingIntroductionInterceptor"
		scope="prototype">
		<constructor-arg>
			<bean class="com.bdsoft.bdceo.spring.aop.CounterImpl" />
		</constructor-arg>
	</bean>
	<bean id="taskProxy4" class="org.springframework.aop.framework.ProxyFactoryBean"
		scope="prototype">
		<property name="targetName" value="task2" />
		<property name="proxyInterfaces">
			<list>
				<value>com.bdsoft.bdceo.spring.aop.ITask</value>
				<value>com.bdsoft.bdceo.spring.aop.ICounter</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>introductionItcpt</value>
			</list>
		</property>
	</bean>

	<!-- 自动代理:BeanNameAutoProxyCreator，需要指定目标对象和advisor -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>do*</value>
				<value>*service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>introductionItcpt</value>
			</list>
		</property>
	</bean>
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<value>do*,*service</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>introductionItcpt</value>
			</list>
		</property>
	</bean>
	<!-- 自动代理：DefaultAdvisorAutoProxyCreator，自动搜寻容器内的所有advisor -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<!-- 目标对象TargetSource:SingletonTargetSource -->
	<bean id="target1" class="com.bdsoft.bdceo.spring.aop.Executeable"></bean>
	<bean id="singleTarget" class="org.springframework.aop.target.SingletonTargetSource">
		<constructor-arg>
			<ref bean="target1"></ref>
		</constructor-arg>
	</bean>
	<bean id="singleProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="targetSource">
			<ref bean="singleTarget"></ref>
		</property>
	</bean>
	<!-- 目标对象TargetSource:PrototypeTargetSource -->
	<bean id="target2" class="com.bdsoft.bdceo.spring.aop.Developer"
		scope="prototype" />
	<bean id="prototypeTarget" class="org.springframework.aop.target.PrototypeTargetSource">
		<property name="targetBeanName" value="target2" />
	</bean>
	<bean id="prototypeProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="targetSource">
			<ref bean="prototypeTarget" />
		</property>
	</bean>
	<!-- 目标对象TargetSource:HotSwappableTargetSource -->
	<bean id="target3" class="com.bdsoft.bdceo.spring.aop.Tester" />
	<bean id="hotswapTarget" class="org.springframework.aop.target.HotSwappableTargetSource">
		<constructor-arg>
			<ref bean="target3"></ref>
		</constructor-arg>
	</bean>
	<bean id="hotswapProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="targetSource">
			<ref bean="hotswapTarget" />
		</property>
	</bean>
</beans>
