<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- appfx-aop：基于AspectJ和Schema形式的AOP测试 -->
	<!-- 自动代理织入：AnnotationAwareAspectJAutoProxyCreator -->
	<!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"> 
		<property name="proxyTargetClass" value="true" /> </bean> -->
	<!-- 基于XSD的自动代理织入 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

	<!-- AspectJ基于POJO形式的Aspect定义 -->
	<bean id="perofrmanceAspect"
		class="com.bdsoft.bdceo.spring.aop.aspectj.PerformanceTraceAspect" />
	<!-- 目标对象 -->
	<bean id="fooTarget" class="com.bdsoft.bdceo.spring.aop.aspectj.Foo" />


	<!-- 基于Schema形式的AOP配置测试 -->
	<bean id="beforeAdvice" class="com.bdsoft.bdceo.spring.aop.ResourceSetupBeforeAdvice" />
	<aop:config>
		<aop:pointcut expression="execution(public void *.xxo*(..))"
			id="aopPointcut" />
		<aop:advisor advice-ref="beforeAdvice" pointcut-ref="aopPointcut"
			order="1" />
	</aop:config>
	<!-- AspectJ到Schema的迁移 -->
	<bean id="aspectPojo" class="com.bdsoft.bdceo.spring.aop.schema.SchemaBaseAspect" />
	<aop:config>
		<aop:aspect id="aspectJAspect" ref="aspectPojo" order="4">
			<aop:pointcut expression="execution(public void *.oxx(..))"
				id="innerPointcut" />
			<aop:before method="doBefore" pointcut-ref="innerPointcut" />
			<aop:after-returning method="doAfterReturning"
				pointcut-ref="innerPointcut" />
			<aop:after-throwing method="doAfterThrowing"
				pointcut-ref="innerPointcut" throwing="e" />
			<aop:after method="doAfter" pointcut-ref="innerPointcut" />
			<aop:around method="doProfile" pointcut-ref="innerPointcut" />
			<aop:declare-parents types-matching="com.bdsoft.bdceo.spring.aop.aspectj.Foo"
				implement-interface="com.bdsoft.bdceo.spring.aop.ICounter"
				default-impl="com.bdsoft.bdceo.spring.aop.CounterImpl" />
		</aop:aspect>
	</aop:config>


	<!-- AOP案例 -->
	<bean id="aopDemo" class="com.bdsoft.bdceo.spring.aop.demo.AOPDemo" />
	<aop:config>
		<aop:aspect id="demoAspect" ref="aspectPojo" order="1">
			<aop:pointcut expression="execution(* com.bdsoft.bdceo.spring.aop.demo.*.*(..))"
				id="demoPointcut" />
			<aop:before method="doBefore" pointcut-ref="demoPointcut" />
			<aop:after method="doAfter" pointcut-ref="demoPointcut" />
			<aop:after-returning method="doAfterReturning"
				pointcut-ref="demoPointcut" />
			<aop:after-throwing method="doAfterThrowing"
				pointcut-ref="demoPointcut" throwing="e" />
			<aop:around method="doProfile" pointcut-ref="demoPointcut" />
			<aop:declare-parents types-matching="com.bdsoft.bdceo.spring.aop.demo.AOPDemo"
				implement-interface="com.bdsoft.bdceo.spring.aop.ICounter"
				default-impl="com.bdsoft.bdceo.spring.aop.CounterImpl" />
		</aop:aspect>
	</aop:config>
</beans>
