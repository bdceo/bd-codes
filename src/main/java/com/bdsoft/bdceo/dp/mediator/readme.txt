
参考：https://blog.csdn.net/qq_39384184/article/details/80631275

想象一个乱糟糟的开发小组的工作状态，组员之间虽然在一起协同工作，但是意见难以统一，总是相互指挥，导致工作进度滞后。
这时候，就需要一个仲裁者。
所有的组员将自己的情况汇报给仲裁者，仲裁者会从团队的整体考虑，然后下达指令。
仲裁者负责统一大家的意见。
这样，团队的交流过程就变成了组员向仲裁者报告，仲裁者向组员下达指令的形式，而组员之间不再询问和沟通，这就是Mediator模式。

Mediator模式中的角色
Mediator（仲裁者）
Mediator角色负责定义与Colleague角色经营通信和做出决定的接口（API）。

ConcreteMediator（具体的仲裁者）
ConcreteMediator角色负责实现Mediator角色的接口（API），负责实际作出决定。

Colleague（同事）
Colleague角色负责定义与Mediator角色通信的接口（API）。

ConcreteColleague（具体的同事）
ConcreteColleague角色负责实现Colleague角色的接口（API）。

优点：

简化了对象之间的交互，它用中介者和同事的一对多交互代替了原来同事之间的多对多交互，一对多关系更容易理解、维护和扩展，将原本难以理解的网状结构转换成相对简单的星型结构。
各同事对象之间解耦：中介者有利于各同事之间的松耦合，我们可以独立的改变和复用每一个同事和中介者，增加新的中介者和新的同事类都比较方便，更好地符合“开闭原则”。
缺点：中介者会庞大，变得复杂难以维护。

使用场景
对象间的交互虽定义明确然而非常复杂，导致一组对象彼此相互依赖而且难以理解。
因为对象引用了许多其他对象并与其通信，导致对象难以复用。
想要定制一个分布在多个类中的逻辑或者行为，又不想生成太多子类。

作者：ikonan
链接：https://www.jianshu.com/p/ec398c2a13bc
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。